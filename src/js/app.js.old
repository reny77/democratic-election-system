App = {

  contracts: {},
  web3Provider: null,             // Web3 provider
  url: 'http://127.0.0.1:8545',   // Url for web3
  account: '0x0',                 // current ethereum account

  init: async function () {
    // load candidates


    // Load pets.
    $.getJSON('../pets.json', function (data) {
      var petsRow = $('#petsRow');
      var petTemplate = $('#petTemplate');

      for (i = 0; i < data.length; i++) {
        petTemplate.find('.panel-title').text(data[i].name);
        petTemplate.find('img').attr('src', data[i].picture);
        petTemplate.find('.pet-breed').text(data[i].breed);
        petTemplate.find('.pet-age').text(data[i].age);
        petTemplate.find('.pet-location').text(data[i].location);
        petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

        petsRow.append(petTemplate.html());
      }
    });

    return await App.initWeb3();
  },

  /* initialize Web3 */
  initWeb3: function () {

    // console.log(web3);

    if (typeof web3 != 'undefined') {
      App.web3Provider = window.ethereum; // !! new standard for modern eth browsers (2/11/18)
      web3 = new Web3(App.web3Provider);
      try {
          ethereum.enable().then(async () => {
            console.log("DApp connected to Metamask");
          });
      }
      catch (error) {
        console.log(error);
      }
    } else {
      App.web3Provider = new Web3.providers.HttpProvider(App.url); // <==
      web3 = new Web3(App.web3Provider);
    }

    return App.initContract();
  },

  initContract: function () {
    // Get current account
    web3.eth.getCoinbase(function(err, account) {
      if (err == null) {
        App.account = account;
        $("#accountId").html("Your address: " + account);
      }
    });
    // Load content's abstractions
    $.getJSON("DemocraticMayor.json").done(function(c) {
      console.log("1:Qui ok");  
      App.contracts["Contract"] = TruffleContract(c);
      App.contracts["Contract"].setProvider(App.web3Provider);
      console.log("2:Qui ok");  
      return App.listenForEvents();
    });

    return App.bindEvents();
  },



  // Write an event listener
  listenForEvents: function() {
    App.contracts["Contract"].deployed().then(async (instance) => {
        // web3.eth.getBlockNumber(function (error, block) {
            // click is the Solidity event
            /*instance.click().on('data', function (event) {
                $("#eventId").html("Event catched!");
                console.log("Event catched");
                console.log(event);
                // If event has parameters: event.returnValues.valueName
            });*/
        // });
    });
    return App.render();
  },


  // Get a value from the smart contract
  render: function() {
      App.contracts["Contract"].deployed().then(async(instance) =>{
          //const v = await instance.value(); // Solidity uint are Js BigNumbers 
          //console.log(v.toNumber());
          //$("#valueId").html("" + v);
      });
  },


  // Call a function from a smart contract
      // The function send an event that triggers a transaction:: Metamask opens to confirm the transaction by the user
  pressClick: function() {
      App.contracts["Contract"].deployed().then(async(instance) =>{
          //await instance.pressClick({from: App.account});
      });
  }, 


  bindEvents: function () {
    App.contracts["Contract"].deployed().then(async(instance) =>{
      const result_get_candidates = await instance.get_candidates();
      for (let i = 0; i < candidates.length; i++) {
        console.log(result_get_candidates[i]);
      }
    });

    $(document).on('click', '.btn-adopt', App.handleAdopt);
  },

  markAdopted: function () {
    /*
     * Replace me...
     */
  },

  handleAdopt: function (event) {
    event.preventDefault();
    var petId = parseInt($(event.target).data('id'));
    /*
     * Replace me...
     */
  }

};

async function getAccount() {
  const accounts = await ethereum.enable();
  const account = accounts[0];
  $("#accountId").html("Your address: " + account);
}
ethereum.on('accountsChanged', function (accounts) {
  getAccount();
})

$(function () {
  $(window).load(function () {
    App.init();
  });
});
